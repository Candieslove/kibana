#!/bin/groovy

library 'kibana-pipeline-library'
kibanaLibrary.load() // load from the Jenkins instance

kibanaPipeline(timeoutMinutes: 180) {
  catchErrors {
    withEnv([
      'CODE_COVERAGE=1', // Enables coverage.  Needed for multiple ci scripts, such as remote.ts, test/scripts/*.sh, schema.js, etc.
    ]) {
      parallel([
        'kibana-intake-agent': workers.intake('kibana-intake', './test/scripts/jenkins_unit.sh'),
        'x-pack-intake-agent': {
          withEnv([
            'NODE_ENV=test' // Needed for jest tests only
          ]) {
            workers.intake('x-pack-intake', './test/scripts/jenkins_xpack.sh')()
          }
        },
        'kibana-oss-agent'   : workers.functional(
          'kibana-oss-tests',
          { kibanaPipeline.buildOss() },
          ossProks()
        ),
        'kibana-xpack-agent' : workers.functional(
          'kibana-xpack-tests',
          { kibanaPipeline.buildXpack() },
          xpackProks()
        ),
      ])
      workers.base(name: 'coverage-worker', size: 'l', ramDisk: false, bootstrapped: false) {
        kibanaPipeline.downloadCoverageArtifacts()
        def timestamp = new Date(currentBuild.startTimeInMillis).format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone("UTC"))
        withEnv([
          "TIME_STAMP=${timestamp}",
        ]) {
          collectVcsInfo()
          def vaultSecret = 'secret/kibana-issues/prod/coverage/elasticsearch'
          withVaultSecret(secret: vaultSecret, secret_field: 'host', variable_name: 'HOST_FROM_VAULT') {
            withVaultSecret(secret: vaultSecret, secret_field: 'username', variable_name: 'USER_FROM_VAULT') {
              withVaultSecret(secret: vaultSecret, secret_field: 'password', variable_name: 'PASS_FROM_VAULT') {
                kibanaPipeline.bash("""
                source src/dev/ci_setup/setup_env.sh

                # bootstrap from x-pack folder
                cd x-pack
                yarn kbn bootstrap --prefer-offline

                # Return to project root
                cd ..

                . src/dev/code_coverage/shell_scripts/extract_archives.sh

                . src/dev/code_coverage/shell_scripts/fix_html_reports_parallel.sh

                . src/dev/code_coverage/shell_scripts/merge_jest_and_functional.sh

                . src/dev/code_coverage/shell_scripts/copy_mocha_reports.sh

                . src/dev/code_coverage/shell_scripts/ingest_coverage.sh ${BUILD_NUMBER} ${env.BUILD_URL}

                """, "### Bootstrap shell and kibana env, merge and ingest code coverage")
              }
            }
          }
          kibanaCoverage.uploadCoverageStaticSite(TIME_STAMP)
        }
      }
    }
    kibanaPipeline.sendMail()
  }
}

def collectVcsInfo() {
  kibanaPipeline.bash(
    '''

    predicate() {
      x=$1
      if [ -n "$x" ]; then
        return
      else
        echo "### 1 or more variables that Code Coverage needs, are undefined"
        exit 1
      fi
    }

    CMD="git log --pretty=format"

    XS=("${GIT_BRANCH}" \
        "$(${CMD}":%h" -1)" \
        "$(${CMD}":%an" -1)" \
        "$(${CMD}":%s" -1)")

    touch VCS_INFO.txt

    for X in "${!XS[@]}"; do
    {
      predicate "${XS[X]}"
      echo "${XS[X]}" >> VCS_INFO.txt
    }
    done

    ''', "### Collect VCS Info"
  )
}
def ossProks() {
  return [
    'oss-ciGroup1' : kibanaPipeline.ossCiGroupProcess(1),
    'oss-ciGroup2' : kibanaPipeline.ossCiGroupProcess(2),
    'oss-ciGroup3' : kibanaPipeline.ossCiGroupProcess(3),
    'oss-ciGroup4' : kibanaPipeline.ossCiGroupProcess(4),
    'oss-ciGroup5' : kibanaPipeline.ossCiGroupProcess(5),
    'oss-ciGroup6' : kibanaPipeline.ossCiGroupProcess(6),
    'oss-ciGroup7' : kibanaPipeline.ossCiGroupProcess(7),
    'oss-ciGroup8' : kibanaPipeline.ossCiGroupProcess(8),
    'oss-ciGroup9' : kibanaPipeline.ossCiGroupProcess(9),
    'oss-ciGroup10': kibanaPipeline.ossCiGroupProcess(10),
    'oss-ciGroup11': kibanaPipeline.ossCiGroupProcess(11),
    'oss-ciGroup12': kibanaPipeline.ossCiGroupProcess(12),
  ]
}
def xpackProks() {
  return [
    'xpack-ciGroup1' : kibanaPipeline.xpackCiGroupProcess(1),
    'xpack-ciGroup2' : kibanaPipeline.xpackCiGroupProcess(2),
    'xpack-ciGroup3' : kibanaPipeline.xpackCiGroupProcess(3),
    'xpack-ciGroup4' : kibanaPipeline.xpackCiGroupProcess(4),
    'xpack-ciGroup5' : kibanaPipeline.xpackCiGroupProcess(5),
    'xpack-ciGroup6' : kibanaPipeline.xpackCiGroupProcess(6),
    'xpack-ciGroup7' : kibanaPipeline.xpackCiGroupProcess(7),
    'xpack-ciGroup8' : kibanaPipeline.xpackCiGroupProcess(8),
    'xpack-ciGroup9' : kibanaPipeline.xpackCiGroupProcess(9),
    'xpack-ciGroup10': kibanaPipeline.xpackCiGroupProcess(10),
  ]
}
